// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package dndb

import (
	"context"
	"database/sql"
)

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*) AS count
FROM tasks
`

func (q *Queries) CountTasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed,
                   time_fixed_time, created_at, updated_at)
VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
`

type CreateTaskParams struct {
	TaskID        int64          `json:"task_id"`
	ParentID      sql.NullInt64  `json:"parent_id"`
	ProjectID     sql.NullInt64  `json:"project_id"`
	Name          interface{}    `json:"name"`
	Description   sql.NullString `json:"description"`
	Priority      sql.NullString `json:"priority"`
	Difficulty    int64          `json:"difficulty"`
	Duration      int64          `json:"duration"`
	TimeFixed     int64          `json:"time_fixed"`
	TimeFixedTime sql.NullString `json:"time_fixed_time"`
	CreatedAt     sql.NullString `json:"created_at"`
	UpdatedAt     sql.NullString `json:"updated_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskID,
		arg.ParentID,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.Priority,
		arg.Difficulty,
		arg.Duration,
		arg.TimeFixed,
		arg.TimeFixedTime,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks
WHERE task_id = ?
RETURNING task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, taskID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const filterTasksByDifficulty = `-- name: FilterTasksByDifficulty :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
FROM tasks
WHERE difficulty = ?
`

func (q *Queries) FilterTasksByDifficulty(ctx context.Context, difficulty int64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, filterTasksByDifficulty, difficulty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterTasksByPriority = `-- name: FilterTasksByPriority :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
FROM tasks
WHERE priority = ?
ORDER BY created_at DESC
`

func (q *Queries) FilterTasksByPriority(ctx context.Context, priority sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, filterTasksByPriority, priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
`

func (q *Queries) ListTasks(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const matchParentId = `-- name: MatchParentId :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE parent_id = ?
`

func (q *Queries) MatchParentId(ctx context.Context, parentID sql.NullInt64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchParentId, parentID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchProjectId = `-- name: MatchProjectId :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE project_id = ?
`

func (q *Queries) MatchProjectId(ctx context.Context, projectID sql.NullInt64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchProjectId, projectID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskCreatedAt = `-- name: MatchTaskCreatedAt :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE created_at = ?
`

func (q *Queries) MatchTaskCreatedAt(ctx context.Context, createdAt sql.NullString) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskCreatedAt, createdAt)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskDescription = `-- name: MatchTaskDescription :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE description = ?
`

func (q *Queries) MatchTaskDescription(ctx context.Context, description sql.NullString) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskDescription, description)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskDifficulty = `-- name: MatchTaskDifficulty :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE difficulty = ?
`

func (q *Queries) MatchTaskDifficulty(ctx context.Context, difficulty int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskDifficulty, difficulty)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskDuration = `-- name: MatchTaskDuration :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE duration = ?
`

func (q *Queries) MatchTaskDuration(ctx context.Context, duration int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskDuration, duration)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskId = `-- name: MatchTaskId :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE task_id = ?
`

func (q *Queries) MatchTaskId(ctx context.Context, taskID int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskId, taskID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskName = `-- name: MatchTaskName :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE name = ?
`

func (q *Queries) MatchTaskName(ctx context.Context, name interface{}) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskName, name)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskPriority = `-- name: MatchTaskPriority :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE priority = ?
`

func (q *Queries) MatchTaskPriority(ctx context.Context, priority sql.NullString) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskPriority, priority)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskTimeFixed = `-- name: MatchTaskTimeFixed :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE time_fixed = ?
`

func (q *Queries) MatchTaskTimeFixed(ctx context.Context, timeFixed int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskTimeFixed, timeFixed)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskTimeFixedTime = `-- name: MatchTaskTimeFixedTime :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE time_fixed_time = ?
`

func (q *Queries) MatchTaskTimeFixedTime(ctx context.Context, timeFixedTime sql.NullString) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskTimeFixedTime, timeFixedTime)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const matchTaskUpdatedAt = `-- name: MatchTaskUpdatedAt :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE updated_at = ?
`

func (q *Queries) MatchTaskUpdatedAt(ctx context.Context, updatedAt sql.NullString) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, matchTaskUpdatedAt, updatedAt)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orderTasksByCreatedAtAsc = `-- name: OrderTasksByCreatedAtAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY created_at ASC
`

func (q *Queries) OrderTasksByCreatedAtAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByCreatedAtAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByCreatedAtDesc = `-- name: OrderTasksByCreatedAtDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY created_at DESC
`

func (q *Queries) OrderTasksByCreatedAtDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByCreatedAtDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDescriptionAsc = `-- name: OrderTasksByDescriptionAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY description ASC
`

func (q *Queries) OrderTasksByDescriptionAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDescriptionAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDescriptionDesc = `-- name: OrderTasksByDescriptionDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY description DESC
`

func (q *Queries) OrderTasksByDescriptionDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDescriptionDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDifficultyAsc = `-- name: OrderTasksByDifficultyAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY difficulty ASC
`

func (q *Queries) OrderTasksByDifficultyAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDifficultyAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDifficultyDesc = `-- name: OrderTasksByDifficultyDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY difficulty DESC
`

func (q *Queries) OrderTasksByDifficultyDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDifficultyDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDurationAsc = `-- name: OrderTasksByDurationAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY duration ASC
`

func (q *Queries) OrderTasksByDurationAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDurationAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByDurationDesc = `-- name: OrderTasksByDurationDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY duration DESC
`

func (q *Queries) OrderTasksByDurationDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByDurationDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByNameAsc = `-- name: OrderTasksByNameAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY name ASC
`

func (q *Queries) OrderTasksByNameAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByNameAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByNameDesc = `-- name: OrderTasksByNameDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY name DESC
`

func (q *Queries) OrderTasksByNameDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByNameDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByParentIdAsc = `-- name: OrderTasksByParentIdAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY parent_id ASC
`

func (q *Queries) OrderTasksByParentIdAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByParentIdAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByParentIdDesc = `-- name: OrderTasksByParentIdDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY parent_id DESC
`

func (q *Queries) OrderTasksByParentIdDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByParentIdDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByPriorityAsc = `-- name: OrderTasksByPriorityAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY priority ASC
`

func (q *Queries) OrderTasksByPriorityAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByPriorityAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByPriorityDesc = `-- name: OrderTasksByPriorityDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY priority DESC
`

func (q *Queries) OrderTasksByPriorityDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByPriorityDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByProjectIdAsc = `-- name: OrderTasksByProjectIdAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY project_id ASC
`

func (q *Queries) OrderTasksByProjectIdAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByProjectIdAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByProjectIdDesc = `-- name: OrderTasksByProjectIdDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY project_id DESC
`

func (q *Queries) OrderTasksByProjectIdDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByProjectIdDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTaskIdAsc = `-- name: OrderTasksByTaskIdAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY task_id ASC
`

func (q *Queries) OrderTasksByTaskIdAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTaskIdAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTaskIdDesc = `-- name: OrderTasksByTaskIdDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY task_id DESC
`

func (q *Queries) OrderTasksByTaskIdDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTaskIdDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTimeFixedAsc = `-- name: OrderTasksByTimeFixedAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY time_fixed ASC
`

func (q *Queries) OrderTasksByTimeFixedAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTimeFixedAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTimeFixedDesc = `-- name: OrderTasksByTimeFixedDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY time_fixed DESC
`

func (q *Queries) OrderTasksByTimeFixedDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTimeFixedDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTimeFixedTimeAsc = `-- name: OrderTasksByTimeFixedTimeAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY time_fixed_time ASC
`

func (q *Queries) OrderTasksByTimeFixedTimeAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTimeFixedTimeAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByTimeFixedTimeDesc = `-- name: OrderTasksByTimeFixedTimeDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY time_fixed_time DESC
`

func (q *Queries) OrderTasksByTimeFixedTimeDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByTimeFixedTimeDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByUpdatedAtAsc = `-- name: OrderTasksByUpdatedAtAsc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY updated_at ASC
`

func (q *Queries) OrderTasksByUpdatedAtAsc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByUpdatedAtAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderTasksByUpdatedAtDesc = `-- name: OrderTasksByUpdatedAtDesc :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
ORDER BY updated_at DESC
`

func (q *Queries) OrderTasksByUpdatedAtDesc(ctx context.Context) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, orderTasksByUpdatedAtDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchParentId = `-- name: SearchParentId :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE parent_id LIKE ?
`

func (q *Queries) SearchParentId(ctx context.Context, parentID sql.NullInt64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProjectId = `-- name: SearchProjectId :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE project_id LIKE ?
`

func (q *Queries) SearchProjectId(ctx context.Context, projectID sql.NullInt64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskCreatedAt = `-- name: SearchTaskCreatedAt :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE created_at LIKE ?
`

func (q *Queries) SearchTaskCreatedAt(ctx context.Context, createdAt sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskCreatedAt, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskDescription = `-- name: SearchTaskDescription :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE description LIKE ?
`

func (q *Queries) SearchTaskDescription(ctx context.Context, description sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskDescription, description)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskDifficulty = `-- name: SearchTaskDifficulty :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE difficulty LIKE ?
`

func (q *Queries) SearchTaskDifficulty(ctx context.Context, difficulty int64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskDifficulty, difficulty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskDuration = `-- name: SearchTaskDuration :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE duration LIKE ?
`

func (q *Queries) SearchTaskDuration(ctx context.Context, duration int64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskDuration, duration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskFixedDate = `-- name: SearchTaskFixedDate :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE time_fixed_time LIKE ?
`

func (q *Queries) SearchTaskFixedDate(ctx context.Context, timeFixedTime sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskFixedDate, timeFixedTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskId = `-- name: SearchTaskId :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE task_id LIKE ?
`

func (q *Queries) SearchTaskId(ctx context.Context, taskID int64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskId, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskName = `-- name: SearchTaskName :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE name LIKE ?
`

func (q *Queries) SearchTaskName(ctx context.Context, name interface{}) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskPriority = `-- name: SearchTaskPriority :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE priority LIKE ?
`

func (q *Queries) SearchTaskPriority(ctx context.Context, priority sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskPriority, priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskTimeFixed = `-- name: SearchTaskTimeFixed :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE time_fixed LIKE ?
`

func (q *Queries) SearchTaskTimeFixed(ctx context.Context, timeFixed int64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskTimeFixed, timeFixed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskTimeFixedTime = `-- name: SearchTaskTimeFixedTime :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE time_fixed_time LIKE ?
`

func (q *Queries) SearchTaskTimeFixedTime(ctx context.Context, timeFixedTime sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskTimeFixedTime, timeFixedTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTaskUpdatedAt = `-- name: SearchTaskUpdatedAt :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE updated_at LIKE ?
`

func (q *Queries) SearchTaskUpdatedAt(ctx context.Context, updatedAt sql.NullString) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, searchTaskUpdatedAt, updatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectNestedTasks = `-- name: SelectNestedTasks :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE parent_id = ?
`

func (q *Queries) SelectNestedTasks(ctx context.Context, parentID sql.NullInt64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, selectNestedTasks, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectProjectTasks = `-- name: SelectProjectTasks :many
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE project_id = ?
`

func (q *Queries) SelectProjectTasks(ctx context.Context, projectID sql.NullInt64) ([]Tasks, error) {
	rows, err := q.db.QueryContext(ctx, selectProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tasks
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.TaskID,
			&i.ParentID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.Difficulty,
			&i.Duration,
			&i.TimeFixed,
			&i.TimeFixedTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTask = `-- name: SelectTask :one
SELECT task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at FROM tasks
WHERE task_id = ? LIMIT 1
`

func (q *Queries) SelectTask(ctx context.Context, taskID int64) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, selectTask, taskID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET parent_id = ?,
    project_id = ?,
    name = ?,
    description = ?,
    priority = ?,
    difficulty = ?,
    duration = ?,
    time_fixed = ?,
    time_fixed_time = ?,
    updated_at = ?
WHERE task_id = ?
RETURNING task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
`

type UpdateTaskParams struct {
	ParentID      sql.NullInt64  `json:"parent_id"`
	ProjectID     sql.NullInt64  `json:"project_id"`
	Name          interface{}    `json:"name"`
	Description   sql.NullString `json:"description"`
	Priority      sql.NullString `json:"priority"`
	Difficulty    int64          `json:"difficulty"`
	Duration      int64          `json:"duration"`
	TimeFixed     int64          `json:"time_fixed"`
	TimeFixedTime sql.NullString `json:"time_fixed_time"`
	UpdatedAt     sql.NullString `json:"updated_at"`
	TaskID        int64          `json:"task_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ParentID,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.Priority,
		arg.Difficulty,
		arg.Duration,
		arg.TimeFixed,
		arg.TimeFixedTime,
		arg.UpdatedAt,
		arg.TaskID,
	)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTaskDescription = `-- name: UpdateTaskDescription :one
UPDATE tasks
SET description = ?, updated_at = ?
WHERE task_id = ?
RETURNING task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
`

type UpdateTaskDescriptionParams struct {
	Description sql.NullString `json:"description"`
	UpdatedAt   sql.NullString `json:"updated_at"`
	TaskID      int64          `json:"task_id"`
}

func (q *Queries) UpdateTaskDescription(ctx context.Context, arg UpdateTaskDescriptionParams) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, updateTaskDescription, arg.Description, arg.UpdatedAt, arg.TaskID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTaskName = `-- name: UpdateTaskName :one
UPDATE tasks
SET name = ?, updated_at = ?
WHERE task_id = ?
RETURNING task_id, parent_id, project_id, name, description, priority, difficulty, duration, time_fixed, time_fixed_time, created_at, updated_at
`

type UpdateTaskNameParams struct {
	Name      interface{}    `json:"name"`
	UpdatedAt sql.NullString `json:"updated_at"`
	TaskID    int64          `json:"task_id"`
}

func (q *Queries) UpdateTaskName(ctx context.Context, arg UpdateTaskNameParams) (Tasks, error) {
	row := q.db.QueryRowContext(ctx, updateTaskName, arg.Name, arg.UpdatedAt, arg.TaskID)
	var i Tasks
	err := row.Scan(
		&i.TaskID,
		&i.ParentID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Difficulty,
		&i.Duration,
		&i.TimeFixed,
		&i.TimeFixedTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
